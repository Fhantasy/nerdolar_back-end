"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.router = void 0;
const express_1 = __importDefault(require("express"));
const userController_1 = require("./controllers/userController");
const categoryController_1 = require("./controllers/categoryController");
const authController_1 = require("./controllers/authController");
const auth_1 = require("./middlewares/auth");
const mediaProductController_1 = require("./controllers/mediaProductController");
const followContoller_1 = require("./controllers/followContoller");
const postController_1 = require("./controllers/postController");
const commentController_1 = require("./controllers/commentController");
const likeController_1 = require("./controllers/likeController");
const watchItemController_1 = require("./controllers/watchItemController");
const router = express_1.default.Router();
exports.router = router;
router.get("/", (req, res) => {
    res.json({ message: "Hello World" });
});
router.post("/register", authController_1.AuthController.register);
router.post("/login", authController_1.AuthController.login);
router.get("/users/current", auth_1.EnsureAuth, userController_1.UserController.currentUserData);
router.get("/users/search", auth_1.EnsureAuth, userController_1.UserController.search);
router.delete("/users/current", auth_1.EnsureAuth, userController_1.UserController.delete);
router.get("/users/:nickname", auth_1.EnsureAuth, userController_1.UserController.show);
router.put("/users/current/profile", auth_1.EnsureAuth, userController_1.uploadProfileImagesMiddleware, userController_1.UserController.profileUpdate);
router.put("/users/current/account", auth_1.EnsureAuth, userController_1.UserController.accountDataUpdate);
router.put("/users/current/password", auth_1.EnsureAuth, userController_1.UserController.passwordUpdate);
router.get("/categories/:id", auth_1.EnsureAuth, categoryController_1.CategoryController.show);
router.get("/media-products", auth_1.EnsureAuth, mediaProductController_1.MediaProductController.all);
router.get("/media-products/search", auth_1.EnsureAuth, mediaProductController_1.MediaProductController.search);
router.get("/media-product/:id", auth_1.EnsureAuth, mediaProductController_1.MediaProductController.getOne);
router.post("/follow", auth_1.EnsureAuth, followContoller_1.FollowController.follow);
router.delete("/follow/:userId", auth_1.EnsureAuth, followContoller_1.FollowController.unfollow);
router.get("/followers", auth_1.EnsureAuth, followContoller_1.FollowController.getFollowers);
router.get("/followings", auth_1.EnsureAuth, followContoller_1.FollowController.getFollowings);
router.post("/posts", auth_1.EnsureAuth, postController_1.uploadPostImageMiddleware, postController_1.PostController.create);
router.get("/posts/search", auth_1.EnsureAuth, postController_1.PostController.search);
router.delete("/posts/:id", auth_1.EnsureAuth, postController_1.PostController.delete);
router.get("/posts/:id", auth_1.EnsureAuth, postController_1.PostController.show);
router.get("/posts/user/:id", auth_1.EnsureAuth, postController_1.PostController.allFromUser);
router.get("/posts/media-product/:id", auth_1.EnsureAuth, postController_1.PostController.allFromMedia);
router.get("/feed", auth_1.EnsureAuth, postController_1.PostController.feed);
router.post("/comment", auth_1.EnsureAuth, commentController_1.CommentController.create);
router.get("/comments/:postId", auth_1.EnsureAuth, commentController_1.CommentController.getAllFromPost);
router.delete("/comment/:id", auth_1.EnsureAuth, commentController_1.CommentController.delete);
router.post("/like", auth_1.EnsureAuth, likeController_1.LikeController.create);
router.delete("/like/:id", auth_1.EnsureAuth, likeController_1.LikeController.delete);
router.post("/watch-item", auth_1.EnsureAuth, watchItemController_1.WatchItemController.create);
router.put("/watch-item", auth_1.EnsureAuth, watchItemController_1.WatchItemController.update);
router.get("/watch-items/categories/:userId", auth_1.EnsureAuth, categoryController_1.CategoryController.getAllFromUserWatchList);
router.get("/watch-item/category/:categoryId/:userId", auth_1.EnsureAuth, watchItemController_1.WatchItemController.getAllPerCategory);
router.get("/watch-item/:id", auth_1.EnsureAuth, watchItemController_1.WatchItemController.getOne);
router.delete("/watch-item/:id", auth_1.EnsureAuth, watchItemController_1.WatchItemController.delete);
router.get("/releases", auth_1.EnsureAuth, watchItemController_1.WatchItemController.getReleasesPerCategory);
